# Copyright 2024 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
# --------------------------------------------------------
# References:
# GLIDE: https://github.com/openai/glide-text2im
# MAE: https://github.com/facebookresearch/mae/blob/main/models_mae.py
# --------------------------------------------------------

import torch
import torch.nn as nn
import numpy as np
import math
import torch.nn.functional as F
from timm.models.vision_transformer import PatchEmbed
from timm.models.layers import LayerNorm2d

from pdb import set_trace as stx
import numbers
# from torchprofile import profile_macs
from einops import rearrange
import einops


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # From: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/weight_init.py
    # Cut & paste from Pytorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            'mean is more than 2 std from [a, b] in nn.init.trunc_normal_. '
            'The distribution of values may be incorrect.',
            stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        low = norm_cdf((a - mean) / std)
        up = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [low, up], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * low - 1, 2 * up - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution.

    From: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/weight_init.py

    The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value

    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

#######################################3###################################
## Layer Norm
def window_partition(x, window_size_h, window_size_w):
    """
    Args:
        x: (B, C, H, W)
        window_size (int): window size

    Returns:
        windows: (num_windows*B, C, window_size, window_size)
    """
    B, C, H, W = x.shape
    x = x.view(B, C, H // window_size_h, window_size_h, W // window_size_w, window_size_w)
    windows = x.permute(0, 2, 4, 1, 3, 5).contiguous().view(-1, C, window_size_h, window_size_w)
    return windows

def window_reverse(windows, window_size_h, window_size_w, H, W):
    """
    Args:
        windows: (num_windows*B, C, window_size, window_size)
        window_size (int): Window size
        H (int): Height of image
        W (int): Width of image

    Returns:
        x: (B, C, H, W)
    """
    B = int(windows.shape[0] / (H * W / window_size_h / window_size_w))
    C = windows.shape[1]
    x = windows.view(B, H // window_size_h, W // window_size_w, C, window_size_h, window_size_w)
    x = x.permute(0, 3, 1, 4, 2, 5).contiguous().view(B, C, H, W)
    return x

def precompute_freqs_cis_2d(dim: int, end: int, theta: float = 10000.0, scale=1.0, use_cls=False):
    H = int( end**0.5 )
    # assert  H * H == end
    flat_patch_pos = torch.arange(0 if not use_cls else -1, end) # N = end
    x_pos = flat_patch_pos % H # N
    y_pos = flat_patch_pos // H # N
    freqs = 1.0 / (theta ** (torch.arange(0, dim, 4)[: (dim // 4)].float() / dim)) # Hc/4
    x_freqs = torch.outer(x_pos, freqs).float() # N Hc/4
    y_freqs = torch.outer(y_pos, freqs).float() # N Hc/4
    x_cis = torch.polar(torch.ones_like(x_freqs), x_freqs)
    y_cis = torch.polar(torch.ones_like(y_freqs), y_freqs)
    freqs_cis = torch.cat([x_cis.unsqueeze(dim=-1), y_cis.unsqueeze(dim=-1)], dim=-1) # N,Hc/4,2
    freqs_cis = freqs_cis.reshape(end if not use_cls else end + 1, -1)
    # we need to think how to implement this for multi heads.
    # freqs_cis = torch.cat([x_cis, y_cis], dim=-1) # N, Hc/2
    return freqs_cis


def reshape_for_broadcast(freqs_cis: torch.Tensor, x: torch.Tensor):
    # x: B N H Hc/2
    # freqs_cis:  N, H*Hc/2 or  N Hc/2
    ndim = x.ndim
    assert 0 <= 1 < ndim

    if freqs_cis.shape[-1] == x.shape[-1]:
        shape = [1 if i == 2 or i == 0 else d for i, d in enumerate(x.shape)]  # 1, N, 1, Hc/2
    else:
        shape = [d if i != 0 else 1 for i, d in enumerate(x.shape)] # 1, N, H, Hc/2
        # B, N, Hc/2
    return freqs_cis.view(*shape)

def apply_rotary_emb(
        xq: torch.Tensor,
        xk: torch.Tensor,
        freqs_cis: torch.Tensor,
):
    # xq : B N Head Ch_per_Head
    xq_ = torch.view_as_complex(xq.float().reshape(*xq.shape[:-1], -1, 2)) # B N H Hc/2
    xk_ = torch.view_as_complex(xk.float().reshape(*xk.shape[:-1], -1, 2))
    freqs_cis = reshape_for_broadcast(freqs_cis, xq_)
    xq_out = torch.view_as_real(xq_ * freqs_cis).flatten(3) # B, N, H, Hc
    xk_out = torch.view_as_real(xk_ * freqs_cis).flatten(3)
    return xq_out.type_as(xq), xk_out.type_as(xk)


class Shortcut(nn.Module):
    def __init__(self, *args, **kwargs):
        super().__init__()
        self.layer = nn.Conv2d(*args, **kwargs)
    def forward(self, x):
        return x + self.layer(x)


class IPT_Global_Attention(nn.Module):
    def __init__(self, dim, input_size, patch_size, num_heads,
                bias=False, posemb_type=None, attn_type=None, before_attn=None, after_attn=None, aug_shortcut=False, **kwargs):
        super(IPT_Global_Attention, self).__init__()
        if kwargs != dict(): # is not empty
            print(f'Kwargs: {kwargs}')

        self.input_resolution = (input_size, input_size)
        self.dim = dim
        self.heads = num_heads
        head_dim = dim // num_heads
        self.scale = head_dim ** -0.5
        self.ph, self.pw = patch_size, patch_size
        self.to_qkv = nn.Linear(dim, dim * 3, bias=bias)
        # self.to_out = nn.Linear(dim, dim, bias=bias)
        self.to_out = nn.Conv2d(dim, dim, 1)

        # 为v2做准备
        self.attn_type = attn_type
        if attn_type == 'v2':
            print('Global Attention type v2...')
            self.logit_scale = nn.Parameter(torch.log(10 * torch.ones((num_heads, 1, 1))), requires_grad=True)

        # 为posemb准备
        self.posemb_type = posemb_type
        if posemb_type is not None:
            print(f'Pos Emb {posemb_type} activated...')
        self.window_size = (input_size//self.ph, input_size//self.pw)
        # posemb type
        if self.posemb_type == 'relbias':

            self.relative_position_bias_table = nn.Parameter(torch.zeros((2 * self.window_size[0] - 1) * (2 * self.window_size[1] - 1), num_heads))  # 2*Wh-1 * 2*Ww-1, nH

            # get pair-wise relative position index for each token inside the window
            coords_h = torch.arange(self.window_size[0])
            coords_w = torch.arange(self.window_size[1])
            coords = torch.stack(torch.meshgrid([coords_h, coords_w]))  # 2, Wh, Ww
            coords_flatten = torch.flatten(coords, 1)  # 2, Wh*Ww
            relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :]  # 2, Wh*Ww, Wh*Ww
            relative_coords = relative_coords.permute(1, 2, 0).contiguous()  # Wh*Ww, Wh*Ww, 2
            relative_coords[:, :, 0] += self.window_size[0] - 1  # shift to start from 0
            relative_coords[:, :, 1] += self.window_size[1] - 1
            relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1
            relative_position_index = relative_coords.sum(-1)  # Wh*Ww, Wh*Ww
            self.register_buffer('relative_position_index', relative_position_index)
            trunc_normal_(self.relative_position_bias_table, std=.02)

        elif self.posemb_type == 'relbias2':
            # mlp to generate continuous relative position bias
            self.cpb_mlp = nn.Sequential(nn.Linear(2, 512, bias=True),
                                        nn.ReLU(inplace=True),
                                        nn.Linear(512, num_heads, bias=False))
            relative_coords_h = torch.arange(-(self.window_size[0] - 1), self.window_size[0], dtype=torch.float32)
            relative_coords_w = torch.arange(-(self.window_size[1] - 1), self.window_size[1], dtype=torch.float32)
            relative_coords_table = torch.stack(
                torch.meshgrid([relative_coords_h,
                                relative_coords_w])).permute(1, 2, 0).contiguous().unsqueeze(0)  # 1, 2*Wh-1, 2*Ww-1, 2

            relative_coords_table[:, :, :, 0] /= (self.window_size[0] - 1)
            relative_coords_table[:, :, :, 1] /= (self.window_size[1] - 1)
            relative_coords_table *= 8  # normalize to -8, 8
            relative_coords_table = torch.sign(relative_coords_table) * torch.log2(
                torch.abs(relative_coords_table) + 1.0) / np.log2(8)

            self.register_buffer("relative_coords_table", relative_coords_table)
            # get pair-wise relative position index for each token inside the window
            coords_h = torch.arange(self.window_size[0])
            coords_w = torch.arange(self.window_size[1])
            coords = torch.stack(torch.meshgrid([coords_h, coords_w]))  # 2, Wh, Ww
            coords_flatten = torch.flatten(coords, 1)  # 2, Wh*Ww
            relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :]  # 2, Wh*Ww, Wh*Ww
            relative_coords = relative_coords.permute(1, 2, 0).contiguous()  # Wh*Ww, Wh*Ww, 2
            relative_coords[:, :, 0] += self.window_size[0] - 1  # shift to start from 0
            relative_coords[:, :, 1] += self.window_size[1] - 1
            relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1
            relative_position_index = relative_coords.sum(-1)  # Wh*Ww, Wh*Ww
            self.register_buffer("relative_position_index", relative_position_index)

        elif self.posemb_type == 'rope2d':
            self.freqs_cis = None

        # attention前后加的
        if before_attn is None:
            self.before_attn = nn.Identity()
        elif before_attn.startswith('dwconv'):
            before_attn_ker_size = int(before_attn[-1])
            before_attn_padding = (int(before_attn[-1])-1)//2
            before_attn_wrapper = nn.Conv2d if not aug_shortcut else Shortcut
            self.before_attn = before_attn_wrapper(dim, dim, kernel_size=before_attn_ker_size, stride=1, padding=before_attn_padding, groups=dim)
        elif before_attn.startswith('conv'):
            before_attn_ker_size = int(before_attn[-1])
            before_attn_padding = (int(before_attn[-1])-1)//2
            before_attn_wrapper = nn.Conv2d if not aug_shortcut else Shortcut
            self.before_attn = before_attn_wrapper(dim, dim, kernel_size=before_attn_ker_size, stride=1, padding=before_attn_padding, groups=1)

        if after_attn is None:
            self.after_attn = nn.Identity()
        elif after_attn.startswith('dwconv'):
            after_attn_ker_size = int(after_attn[-1])
            after_attn_padding = (int(after_attn[-1])-1)//2
            after_attn_wrapper = nn.Conv2d if not aug_shortcut else Shortcut
            self.after_attn = after_attn_wrapper(dim, dim, kernel_size=after_attn_ker_size, stride=1, padding=after_attn_padding, groups=dim)



    def forward(self, x):
        b, _, h, w = x.size()
        x = self.before_attn(x)
        x = rearrange(x, 'b d (h ph) (w pw) -> b (ph pw) (h w) d', ph=self.ph, pw=self.pw)
        qkv = self.to_qkv(x).chunk(3, dim=-1)

        if self.posemb_type == 'rope2d':
            N = h * w // self.ph // self.pw
            if self.freqs_cis is None or self.freqs_cis.shape[0] != N:
                self.freqs_cis = precompute_freqs_cis_2d(self.dim // self.heads, N).to(x.device)
            # q, k input shape: B N H Hc
            q, k = map(lambda t: rearrange(t, 'b p n (h d) -> (b p) n h d', h=self.heads), qkv[:-1])
            v = rearrange(qkv[2], 'b p n (h d) -> b p h n d', h=self.heads)
            q, k = apply_rotary_emb(q, k, freqs_cis=self.freqs_cis)
            # reshape back
            q = rearrange(q, '(b p) n h d -> b p h n d', b=b)
            k = rearrange(k, '(b p) n h d -> b p h n d', b=b)
        else:
            q, k, v = map(lambda t: rearrange(t, 'b p n (h d) -> b p h n d', h=self.heads), qkv)

        if self.attn_type is None: # v1 attention
            attn = (q @ k.transpose(-2, -1))
            attn = attn * self.scale
        elif self.attn_type == 'v2': # v2 attention
            attn = (F.normalize(q, dim=-1) @ F.normalize(k, dim=-1).transpose(-2, -1))
            logit_scale = torch.clamp(self.logit_scale, max=4.6052).exp()
            attn = attn * logit_scale

        if self.posemb_type == 'relbias':
            relative_position_bias = self.relative_position_bias_table[self.relative_position_index.view(-1)].view(
            self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)  # Wh*Ww,Wh*Ww,nH
            relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww
            attn = attn + relative_position_bias.unsqueeze(0).unsqueeze(0)
        elif self.posemb_type == 'relbias2':
            relative_position_bias_table = self.cpb_mlp(self.relative_coords_table).view(-1, self.heads)
            relative_position_bias = relative_position_bias_table[self.relative_position_index.view(-1)].view(
                self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)  # Wh*Ww,Wh*Ww,nH
            relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww
            relative_position_bias = 16 * torch.sigmoid(relative_position_bias)
            attn = attn + relative_position_bias.unsqueeze(0).unsqueeze(0)

        attn = attn.softmax(dim=-1)
        shifted_out = (attn @ v)
        out = rearrange(shifted_out, 'b (ph pw) he (h w) d -> b (he d) (h ph) (w pw)', h=h // self.ph, w=w // self.pw,
                                ph=self.ph,
                                pw=self.pw)
        out = self.after_attn(out)
        out = self.to_out(out)
        return out

class IPT_Local_Attention(nn.Module):
    def __init__(self, dim, input_size, patch_size, num_heads,
                bias=False, posemb_type=None, attn_type=None, shift_size=0, **kwargs):
        super(IPT_Local_Attention, self).__init__()
        if kwargs != dict(): # is not empty
            print(f'Kwargs: {kwargs}')

        self.input_resolution = (input_size, input_size)

        self.heads = num_heads
        head_dim = dim // num_heads
        self.scale = head_dim ** -0.5
        self.ph, self.pw = patch_size, patch_size
        self.to_qkv = nn.Linear(dim, dim * 3, bias=bias)
        self.to_out = nn.Linear(dim, dim, bias=bias)
        self.shift_size = shift_size # add shift
        if self.shift_size > 0:
            print('Shift activated...')
        # v2
        self.attn_type = attn_type
        if attn_type == 'v2':
            print('Local Attention type v2...')
            self.logit_scale = nn.Parameter(torch.log(10 * torch.ones((num_heads, 1, 1))), requires_grad=True)
        # posemb
        self.posemb_type = posemb_type
        if posemb_type is not None:
            print(f'Pos Emb {posemb_type} activated...')
        self.window_size = (input_size//self.ph, input_size//self.pw)
        # posemb type
        if self.posemb_type == 'relbias':
            self.relative_position_bias_table = nn.Parameter(torch.zeros((2 * self.window_size[0] - 1) * (2 * self.window_size[1] - 1), num_heads))  # 2*Wh-1 * 2*Ww-1, nH
            # get pair-wise relative position index for each token inside the window
            coords_h = torch.arange(self.window_size[0])
            coords_w = torch.arange(self.window_size[1])
            coords = torch.stack(torch.meshgrid([coords_h, coords_w]))  # 2, Wh, Ww
            coords_flatten = torch.flatten(coords, 1)  # 2, Wh*Ww
            relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :]  # 2, Wh*Ww, Wh*Ww
            relative_coords = relative_coords.permute(1, 2, 0).contiguous()  # Wh*Ww, Wh*Ww, 2
            relative_coords[:, :, 0] += self.window_size[0] - 1  # shift to start from 0
            relative_coords[:, :, 1] += self.window_size[1] - 1
            relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1
            relative_position_index = relative_coords.sum(-1)  # Wh*Ww, Wh*Ww
            self.register_buffer('relative_position_index', relative_position_index)
            trunc_normal_(self.relative_position_bias_table, std=.02)

        elif self.posemb_type == 'relbias2':
            # mlp to generate continuous relative position bias
            self.cpb_mlp = nn.Sequential(nn.Linear(2, 512, bias=True),
                                        nn.ReLU(inplace=True),
                                        nn.Linear(512, num_heads, bias=False))
            relative_coords_h = torch.arange(-(self.window_size[0] - 1), self.window_size[0], dtype=torch.float32)
            relative_coords_w = torch.arange(-(self.window_size[1] - 1), self.window_size[1], dtype=torch.float32)
            relative_coords_table = torch.stack(
                torch.meshgrid([relative_coords_h,
                                relative_coords_w])).permute(1, 2, 0).contiguous().unsqueeze(0)  # 1, 2*Wh-1, 2*Ww-1, 2

            relative_coords_table[:, :, :, 0] /= (self.window_size[0] - 1)
            relative_coords_table[:, :, :, 1] /= (self.window_size[1] - 1)
            relative_coords_table *= 8  # normalize to -8, 8
            relative_coords_table = torch.sign(relative_coords_table) * torch.log2(
                torch.abs(relative_coords_table) + 1.0) / np.log2(8)

            self.register_buffer("relative_coords_table", relative_coords_table)
            # get pair-wise relative position index for each token inside the window
            coords_h = torch.arange(self.window_size[0])
            coords_w = torch.arange(self.window_size[1])
            coords = torch.stack(torch.meshgrid([coords_h, coords_w]))  # 2, Wh, Ww
            coords_flatten = torch.flatten(coords, 1)  # 2, Wh*Ww
            relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :]  # 2, Wh*Ww, Wh*Ww
            relative_coords = relative_coords.permute(1, 2, 0).contiguous()  # Wh*Ww, Wh*Ww, 2
            relative_coords[:, :, 0] += self.window_size[0] - 1  # shift to start from 0
            relative_coords[:, :, 1] += self.window_size[1] - 1
            relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1
            relative_position_index = relative_coords.sum(-1)  # Wh*Ww, Wh*Ww
            self.register_buffer("relative_position_index", relative_position_index)


    def forward(self, x):
        _, _, h, w = x.size()
        if self.shift_size > 0:
            window_size = (h // self.ph), (w // self.pw)
            x = torch.roll(x, shifts=(-window_size[0]//2, -window_size[1]//2), dims=(2, 3))

        x = rearrange(x, 'b d (ph h) (pw w) -> b (ph pw) (h w) d', ph=self.ph, pw=self.pw)
        qkv = self.to_qkv(x).chunk(3, dim=-1)

        q, k, v = map(lambda t: rearrange(t, 'b p n (h d) -> b p h n d', h=self.heads), qkv)

        if self.attn_type is None: # v1 attention
            attn = (q @ k.transpose(-2, -1))
            attn = attn * self.scale
        elif self.attn_type == 'v2': # v2 attention
            attn = (F.normalize(q, dim=-1) @ F.normalize(k, dim=-1).transpose(-2, -1))
            logit_scale = torch.clamp(self.logit_scale, max=4.6052).exp()
            attn = attn * logit_scale

        if self.posemb_type == 'relbias':
            relative_position_bias = self.relative_position_bias_table[self.relative_position_index.view(-1)].view(
            self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)  # Wh*Ww,Wh*Ww,nH
            relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww
            attn = attn + relative_position_bias.unsqueeze(0).unsqueeze(0)
        elif self.posemb_type == 'relbias2':
            relative_position_bias_table = self.cpb_mlp(self.relative_coords_table).view(-1, self.heads)
            relative_position_bias = relative_position_bias_table[self.relative_position_index.view(-1)].view(
                self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)  # Wh*Ww,Wh*Ww,nH
            relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww
            relative_position_bias = 16 * torch.sigmoid(relative_position_bias)
            attn = attn + relative_position_bias.unsqueeze(0).unsqueeze(0)

        attn = attn.softmax(dim=-1)

        shifted_out = (attn @ v)
        shifted_out = rearrange(shifted_out, 'b p h n d -> b p n (h d)')
        shifted_out = self.to_out(shifted_out)
        out = rearrange(shifted_out, 'b (ph pw) (h w) d -> b d (ph h) (pw w)', h=h // self.ph, w=w // self.pw,
                                ph=self.ph,
                                pw=self.pw)

        if self.shift_size > 0:
            window_size = (h // self.ph), (w // self.pw)
            x = torch.roll(x, shifts=(window_size[0]//2, window_size[1]//2), dims=(2, 3))

        return out

class IPT_Double_Attention(nn.Module):
    def __init__(self, dim, input_size, local_win, global_win, num_heads,
                bias=False, posemb_type=None):
        super(IPT_Double_Attention, self).__init__()
        self.input_resolution = (input_size, input_size)

        self.heads = num_heads
        self.head_dim = head_dim = dim // num_heads
        self.scale = head_dim ** (-0.5)
        self.local_win, self.global_win = local_win, global_win
        self.to_qkv = nn.Conv2d(dim, dim * 3, kernel_size=1, bias=bias)
        self.to_out = nn.Conv2d(dim, dim, kernel_size=1, bias=bias)

    def calc_attn(self, qkv):
        q, k, v = map(lambda t: rearrange(t, 'b p n (h d) -> b p h n d', d=self.head_dim), qkv)

        attn = (q @ k.transpose(-2, -1))

        attn = attn * self.scale

        attn = attn.softmax(dim=-1)

        shifted_out = (attn @ v)
        return shifted_out # (b p h n d)

    def forward(self, x):
        _, _, h, w = x.size()
        qkv_local, qkv_global = self.to_qkv(x).chunk(2, dim=1)
        qkv_local = rearrange(qkv_local, 'b d (ph h) (pw w) -> b (ph pw) (h w) d', ph=self.local_win, pw=self.local_win).chunk(3, dim=-1)
        qkv_global = rearrange(qkv_global, 'b d (h ph) (w pw) -> b (ph pw) (h w) d', ph=self.global_win, pw=self.global_win).chunk(3, dim=-1)
        shifted_out_local = self.calc_attn(qkv_local)
        shifted_out_local = rearrange(shifted_out_local, 'b (ph pw) he (h w) d -> b (he d) (ph h) (pw w)', ph=self.local_win, h=h//self.local_win)
        shifted_out_global = self.calc_attn(qkv_global)
        shifted_out_global = rearrange(shifted_out_global, 'b (ph pw) he (h w) d -> b (he d) (h ph) (w pw)', ph=self.global_win, h=h//self.global_win)

        shifted_out = torch.cat([shifted_out_local, shifted_out_global], dim=1)
        shifted_out = self.to_out(shifted_out)
        return shifted_out


class CBSA(nn.Module):
    def __init__(self, num_heads, window_size_h, window_size_w):
        super(CBSA, self).__init__()
        self.num_heads = num_heads
        self.window_size_h = window_size_h
        self.window_size_w = window_size_w
        self.temperature = nn.Parameter(torch.ones(num_heads, 1, 1))
        self.spatial_affine = nn.Parameter(torch.ones(num_heads, 1, window_size_h * window_size_w))
        self.mask = nn.Parameter(torch.ones(1, num_heads, window_size_h, window_size_w))

    def forward(self, qkv):
        q, k, v = qkv.chunk(3, dim=1)
        b, c, h, w = v.shape

        q = rearrange(q, 'b (head c) h w -> b head c (h w)', head=self.num_heads)
        k = rearrange(k, 'b (head c) h w -> b head c (h w)', head=self.num_heads)
        v = rearrange(v, 'b (head c) h w -> b head c (h w)', head=self.num_heads)

        q = q * self.spatial_affine
        k = k * self.spatial_affine
        q = torch.nn.functional.normalize(q, dim=-1)
        k = torch.nn.functional.normalize(k, dim=-1)

        attn = (q @ k.transpose(-2, -1)) * self.temperature
        attn = attn.softmax(dim=-1)
        out = (attn @ v)
        out = rearrange(out, 'b head c (h w) -> b (head c) h w', head=self.num_heads, h=h, w=w)

        return out, self.mask.repeat(b, 1, 1, 1)

class IPTV2_Focal_Attention(nn.Module):
    def __init__(self, dim, window_size, num_heads, bias):
        super(IPTV2_Focal_Attention, self).__init__()
        self.num_heads = num_heads
        self.shift_ratio = 0.5
        self.window_size_h = window_size
        self.window_size_w = window_size
        self.cbsa_base = CBSA(num_heads, window_size, window_size)
        self.cbsa_slice_base = CBSA(num_heads, window_size, window_size)
        self.qkv = nn.Conv2d(dim, dim * 3, kernel_size=1, bias=bias)
        self.qkv_dwconv = nn.Conv2d(dim * 3, dim * 3, kernel_size=3, stride=1, padding=1, groups=dim * 3, bias=bias)
        self.project_out = nn.Conv2d(dim, dim, kernel_size=1, bias=bias)

    def forward(self, x):
        b, c, h, w = x.shape

        window_size_h = self.window_size_h if self.window_size_h != 0 else h
        window_size_w = self.window_size_w if self.window_size_w != 0 else w

        qkv = self.qkv_dwconv(self.qkv(x))

        qkv_win = window_partition(qkv, window_size_h, window_size_w)

        out_base_win, score_win = self.cbsa_base(qkv_win)

        out1 = window_reverse(out_base_win, window_size_h, window_size_w, h, w)

        score1 = window_reverse(score_win, window_size_h, window_size_w, h, w)

        ##############################################################################
        # slice
        h_slices = (slice((int)(window_size_h * self.shift_ratio), -(int)(window_size_h * self.shift_ratio)),
                    slice(-(int)(window_size_h * self.shift_ratio), None))
        w_slices = (slice((int)(window_size_w * self.shift_ratio), -(int)(window_size_w * self.shift_ratio)),
                    slice(-(int)(window_size_w * self.shift_ratio), None))

        qkv_slice = qkv[:, :, h_slices[0], w_slices[0]]

        if qkv_slice.shape[-1] == 0 or qkv_slice.shape[-2] == 0:
            return self.project_out(out1)

        qkv_slice_win = window_partition(qkv_slice, window_size_h, window_size_w)
        out_slice_win, score_slice_win = self.cbsa_slice_base(qkv_slice_win)

        out_slice = window_reverse(out_slice_win, window_size_h, window_size_w, h - window_size_h, w - window_size_w)
        score_slice = window_reverse(score_slice_win, window_size_h, window_size_w, h - window_size_h,
                                    w - window_size_w)

        # reverse slice(pad)
        pad = nn.ZeroPad2d(padding=((int)(window_size_w * self.shift_ratio), (int)(window_size_w * self.shift_ratio),
                                    (int)(window_size_h * self.shift_ratio), (int)(window_size_h * self.shift_ratio)))
        out2 = pad(out_slice)
        score2 = pad(score_slice)
        ##############################################################################
        ##############################################################################
        # score
        score1 = score1.unsqueeze(dim=2)
        score2 = score2.unsqueeze(dim=2)
        score_sum = score1 + score2

        out1 = rearrange(out1, 'b (head c) h w -> b head c h w', head=self.num_heads)
        out2 = rearrange(out2, 'b (head c) h w -> b head c h w', head=self.num_heads)

        out = (out1 * score1 + out2 * score2) / score_sum

        out = rearrange(out, 'b head c h w -> b (head c) h w', head=self.num_heads)
        ##############################################################################

        out = self.project_out(out)
        return out

class IPT_Multi_Attention(nn.Module):
    def __init__(self, dim, input_size, patch_size, num_heads,
                bias=False, posemb_type=None, attn_type=None, before_attn=None, after_attn=None, aug_shortcut=False, stage=2, **kwargs):
        super(IPT_Global_Attention, self).__init__()
        if kwargs != dict(): # is not empty
            print(f'Kwargs: {kwargs}')

        self.input_resolution = (input_size, input_size)
        self.dim = dim
        self.heads = num_heads
        head_dim = dim // num_heads
        self.scale = head_dim ** -0.5
        self.ph, self.pw = patch_size, patch_size
        self.to_qkv = nn.Linear(dim, dim * 3, bias=bias)
        self.to_out = nn.Conv2d(dim, dim, 1)

        self.attn_type = attn_type
        if attn_type == 'v2':
            print('Global Attention type v2...')
            self.logit_scale = nn.Parameter(torch.log(10 * torch.ones((num_heads, 1, 1))), requires_grad=True)

        self.posemb_type = posemb_type
        if posemb_type is not None:
            print(f'Pos Emb {posemb_type} activated...')
        self.window_size = (input_size//self.ph, input_size//self.pw)

        self.before_attn_type = 'dwconv'
        if before_attn is None:
            self.before_attn = nn.Identity()
        elif before_attn.startswith('dwconv'):
            before_attn_ker_size = int(before_attn[-1])
            before_attn_padding = (int(before_attn[-1])-1)//2
            before_attn_wrapper = nn.Conv2d if not aug_shortcut else Shortcut
            self.before_attn = before_attn_wrapper(dim, dim, kernel_size=before_attn_ker_size, stride=1, padding=before_attn_padding, groups=dim)


    def forward(self, x):
        b, _, h, w = x.size()
        x = self.before_attn(x)
        x = rearrange(x, 'b d (h ph) (w pw) -> b (ph pw) (h w) d', ph=self.ph, pw=self.pw)
        qkv = self.to_qkv(x).chunk(3, dim=-1)

        q, k, v = map(lambda t: rearrange(t, 'b p n (h d) -> b p h n d', h=self.heads), qkv)

        if self.attn_type is None: # v1 attention
            attn = (q @ k.transpose(-2, -1))
            attn = attn * self.scale
        elif self.attn_type == 'v2': # v2 attention
            attn = (F.normalize(q, dim=-1) @ F.normalize(k, dim=-1).transpose(-2, -1))
            logit_scale = torch.clamp(self.logit_scale, max=4.6052).exp()
            attn = attn * logit_scale


        attn = attn.softmax(dim=-1)
        shifted_out = (attn @ v)
        out = rearrange(shifted_out, 'b (ph pw) he (h w) d -> b (he d) (h ph) (w pw)', h=h // self.ph, w=w // self.pw,
                                ph=self.ph,
                                pw=self.pw)
        out = self.after_attn(out)
        out = self.to_out(out)
        return out


class FeedForward(nn.Module):
    def __init__(self, dim, ffn_expansion_factor, bias=True, rep=False):
        super(FeedForward, self).__init__()

        self.rep = rep

        hidden_features = int(dim*ffn_expansion_factor)

        if rep == 1:
            self.project_in = nn.Sequential(nn.Conv2d(dim, hidden_features//2, kernel_size=1, bias=bias),
                                            nn.Conv2d(hidden_features//2, hidden_features, kernel_size=1, bias=bias))

            self.dwconv = nn.ModuleList([
                nn.Conv2d(hidden_features, hidden_features, kernel_size=5, stride=1, padding=2, dilation=1, groups=hidden_features, bias=bias),
                nn.Conv2d(hidden_features, hidden_features, kernel_size=3, stride=1, padding=1, dilation=1, groups=hidden_features, bias=bias),
                nn.Conv2d(hidden_features, hidden_features, kernel_size=1, stride=1, padding=0, dilation=1, groups=hidden_features, bias=bias)
            ])

            self.project_out = nn.Sequential(nn.Conv2d(hidden_features, hidden_features//2, kernel_size=1, bias=bias),
                                             nn.Conv2d(hidden_features//2, dim, kernel_size=1, bias=bias))

        elif rep == 2:
            self.project_in = nn.Sequential(nn.Conv2d(dim, hidden_features//2, kernel_size=1, bias=bias),
                                            nn.Conv2d(hidden_features//2, hidden_features, kernel_size=1, bias=bias))

            self.dwconv = nn.Conv2d(hidden_features, hidden_features, kernel_size=5, stride=1, padding=2, groups=hidden_features, bias=bias)

            self.project_out = nn.Sequential(nn.Conv2d(hidden_features, hidden_features//2, kernel_size=1, bias=bias),
                                             nn.Conv2d(hidden_features//2, dim, kernel_size=1, bias=bias))

        elif rep == 3:
            self.project_in = nn.Conv2d(dim, hidden_features, kernel_size=1, bias=bias)

            self.dwconv = nn.ModuleList([
                nn.Conv2d(hidden_features, hidden_features, kernel_size=5, stride=1, padding=2, dilation=1, groups=hidden_features, bias=bias),
                nn.Conv2d(hidden_features, hidden_features, kernel_size=3, stride=1, padding=1, dilation=1, groups=hidden_features, bias=bias),
                nn.Conv2d(hidden_features, hidden_features, kernel_size=1, stride=1, padding=0, dilation=1, groups=hidden_features, bias=bias)
            ])

            self.project_out = nn.Conv2d(hidden_features, dim, kernel_size=1, bias=bias)

        elif rep==0:
            self.project_in = nn.Conv2d(dim, hidden_features, kernel_size=1, bias=bias)
            self.dwconv = nn.Conv2d(hidden_features, hidden_features, kernel_size=5, stride=1, padding=2, groups=hidden_features, bias=bias)
            self.project_out = nn.Conv2d(hidden_features, dim, kernel_size=1, bias=bias)

    def forward(self, x):
        x = self.project_in(x)
        x = F.gelu(x)
        if self.rep:
            out = x
            for module in self.dwconv:
                out = out + module(x)
        else:
            out = self.dwconv(x)
        x = self.project_out(out)
        return x

# 传统的两种FFN
class dwconv(nn.Module):
    def __init__(self,hidden_features,kernel_size=5):
        super(dwconv, self).__init__()
        self.depthwise_conv = nn.Sequential(
            nn.Conv2d(hidden_features, hidden_features, kernel_size=kernel_size, stride=1, padding=(kernel_size-1)//2, dilation=1,
                      groups=hidden_features), nn.GELU())
        self.hidden_features = hidden_features
    def forward(self, x):
        # x: (B H W C)
        x = self.depthwise_conv(x)
        return x 

class ConvFFN(nn.Module):

    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.,ffn_type=None):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.in_features, self.hidden_features = in_features, hidden_features
        self.fc1 = nn.Conv2d(in_features, hidden_features, kernel_size=1)
        self.act = act_layer()
        self.before_add = nn.Identity()
        self.after_add = nn.Identity()
        self.dwconv = dwconv(hidden_features=hidden_features, kernel_size=int(ffn_type[-1]))
        self.fc2 = nn.Conv2d(hidden_features, out_features, kernel_size=1)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.before_add(x)
        x = x + self.dwconv(x)
        x = self.after_add(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x

class Mlp(nn.Module):
    """ MLP as used in Vision Transformer, MLP-Mixer and related networks
    """
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, bias=True, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        bias = (bias, bias)
        drop_probs = (drop, drop)

        self.fc1 = nn.Conv2d(in_features, hidden_features, 1, bias=bias[0])
        self.act = act_layer()
        self.drop1 = nn.Dropout(drop_probs[0])
        self.fc2 = nn.Conv2d(hidden_features, out_features, 1, bias=bias[1])
        self.drop2 = nn.Dropout(drop_probs[1])

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop1(x)
        x = self.fc2(x)
        x = self.drop2(x)
        return x

class Attention2d(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, attn_drop=0., proj_drop=0.):
        super().__init__()
        assert dim % num_heads == 0, 'dim should be divisible by num_heads'
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = head_dim ** -0.5

        self.qkv = nn.Conv2d(dim, dim * 3, 1, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Conv2d(dim, dim, 1)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        B, C, H, W = x.shape
        qkv = self.qkv(x).reshape(B, 3, self.num_heads, C // self.num_heads, H*W)
        q, k, v = qkv.unbind(dim=1)   # make torchscript happy (cannot use tensor as tuple) # B, head, c, H*W

        attn = (k.transpose(-2, -1) @ q) * self.scale # [HW, c] x [c, HW]
        attn = attn.softmax(dim=-2)
        attn = self.attn_drop(attn)

        x = (v @ attn).transpose(-1, -2).reshape(B, C, H, W) # [b, head, HW, HW] x [b, head, C, HW] = [b, head, HW, C]
        x = self.proj(x)
        x = self.proj_drop(x)
        return x

class WindowAttention2d(nn.Module):
    r""" Window based multi-head self attention (W-MSA) module with relative position bias.
    It supports both of shifted and non-shifted window.

    Args:
        dim (int): Number of input channels.
        window_size (tuple[int]): The height and width of the window.
        num_heads (int): Number of attention heads.
        qkv_bias (bool, optional):  If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set
        attn_drop (float, optional): Dropout ratio of attention weight. Default: 0.0
        proj_drop (float, optional): Dropout ratio of output. Default: 0.0
    """

    def __init__(self, dim, window_size, num_heads, qkv_bias=True, qk_scale=None, attn_drop=0., proj_drop=0., shift_size=0, **kwargs):

        super().__init__()
        self.dim = dim
        self.window_size = window_size
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim**-0.5
        self.shift_size = shift_size

        # define a parameter table of relative position bias
        self.relative_position_bias_table = nn.Parameter(
            torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads))  # 2*Wh-1 * 2*Ww-1, nH

        # get pair-wise relative position index for each token inside the window
        coords_h = torch.arange(self.window_size[0])
        coords_w = torch.arange(self.window_size[1])
        coords = torch.stack(torch.meshgrid([coords_h, coords_w]))  # 2, Wh, Ww
        coords_flatten = torch.flatten(coords, 1)  # 2, Wh*Ww
        relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :]  # 2, Wh*Ww, Wh*Ww
        relative_coords = relative_coords.permute(1, 2, 0).contiguous()  # Wh*Ww, Wh*Ww, 2
        relative_coords[:, :, 0] += self.window_size[0] - 1  # shift to start from 0
        relative_coords[:, :, 1] += self.window_size[1] - 1
        relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1
        relative_position_index = relative_coords.sum(-1)  # Wh*Ww, Wh*Ww
        self.register_buffer('relative_position_index', relative_position_index)

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)

        self.proj_drop = nn.Dropout(proj_drop)

        trunc_normal_(self.relative_position_bias_table, std=.02)
        self.softmax = nn.Softmax(dim=-1)

    def forward(self, x, mask=None):
        """
        Args:
            x: input features with shape of (num_windows*b, n, c)
            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None
        """
        # step1：shift
        if self.shift_size > 0:
            x = torch.roll(x, shifts=(-self.window_size[0]//2, -self.window_size[1]//2), dims=(2, 3))

        # step2：window
        nH, nW = x.size(2)//self.window_size[0], x.size(3)//self.window_size[1]
        x = einops.rearrange(x, 'B C (nh wh) (nw ww)->(B nh nw) (wh ww) C', wh=self.window_size[0], ww=self.window_size[1])
        

        b_, n, c = x.shape
        qkv = self.qkv(x).reshape(b_, n, 3, self.num_heads, c // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]  # make torchscript happy (cannot use tensor as tuple)

        q = q * self.scale
        attn = (q @ k.transpose(-2, -1))

        relative_position_bias = self.relative_position_bias_table[self.relative_position_index.view(-1)].view(
            self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)  # Wh*Ww,Wh*Ww,nH
        relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww
        attn = attn + relative_position_bias.unsqueeze(0)

        if mask is not None:
            nw = mask.shape[0]
            attn = attn.view(b_ // nw, nw, self.num_heads, n, n) + mask.unsqueeze(1).unsqueeze(0)
            attn = attn.view(-1, self.num_heads, n, n)
            attn = self.softmax(attn)
        else:
            attn = self.softmax(attn)

        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(b_, n, c)
        x = self.proj(x)
        x = self.proj_drop(x)

        x = einops.rearrange(x, '(B nh nw) (wh ww) C -> B C (nh wh) (nw ww)', wh=self.window_size[0], ww=self.window_size[1], nh=nH, nw=nW)

        if self.shift_size > 0:
            x = torch.roll(x, shifts=(self.window_size[0]//2, self.window_size[1]//2), dims=(2, 3))

        return x

class ChAttention2d(nn.Module):
    def __init__(self, dim, num_heads, bias):
        super(ChAttention2d, self).__init__()
        assert dim % num_heads == 0
        self.num_heads = num_heads
        self.temperature = nn.Parameter(torch.ones(num_heads, 1, 1))

        self.qkv = nn.Conv2d(dim, dim*3, kernel_size=1, bias=bias)
        self.qkv_dwconv = nn.Conv2d(dim*3, dim*3, kernel_size=3, stride=1, padding=1, groups=dim*3, bias=bias)
        self.project_out = nn.Conv2d(dim, dim, kernel_size=1, bias=bias)

    def forward(self, x):
        b,c,h,w = x.shape

        qkv = self.qkv_dwconv(self.qkv(x))
        q,k,v = qkv.chunk(3, dim=1)   
        
        q = einops.rearrange(q, 'b (head c) h w -> b head c (h w)', head=self.num_heads)
        k = einops.rearrange(k, 'b (head c) h w -> b head c (h w)', head=self.num_heads)
        v = einops.rearrange(v, 'b (head c) h w -> b head c (h w)', head=self.num_heads)

        q = torch.nn.functional.normalize(q, dim=-1)
        k = torch.nn.functional.normalize(k, dim=-1)

        attn = (q @ k.transpose(-2, -1)) * self.temperature
        attn = attn.softmax(dim=-1)
        out = (attn @ v)
        out = einops.rearrange(out, 'b head c (h w) -> b (head c) h w', head=self.num_heads, h=h, w=w)
        out = self.project_out(out)
        return out

class SimpleGate(nn.Module):
    def forward(self, x):
        x1, x2 = x.chunk(2, dim=1)
        return x1 * x2

class NAFBlock(nn.Module):
    def __init__(self, c, dw_expand=2, dw_type='none', drop_out_rate=0.):
        super().__init__()
        dw_channel = c * dw_expand
        if dw_type == 'none':
            self.conv1 = nn.Conv2d(in_channels=c, out_channels=dw_channel, kernel_size=1, padding=0, stride=1, groups=1, bias=True)
            self.conv2 = nn.Conv2d(in_channels=dw_channel, out_channels=dw_channel, kernel_size=3, padding=1, stride=1, groups=dw_channel, bias=True)
        elif dw_type == 'conv':
            self.conv1 = nn.Conv2d(in_channels=c, out_channels=dw_channel, kernel_size=3, padding=1, stride=1, groups=1, bias=True)
            self.conv2 = nn.Identity()

        self.conv3 = nn.Conv2d(in_channels=dw_channel // 2, out_channels=c, kernel_size=1, padding=0, stride=1, groups=1, bias=True)
        
        # Simplified Channel Attention
        self.sca = nn.Sequential(
            nn.AdaptiveAvgPool2d(1),
            nn.Conv2d(in_channels=dw_channel // 2, out_channels=dw_channel // 2, kernel_size=1, padding=0, stride=1,
                      groups=1, bias=True),
        )
        # SimpleGate
        self.sg = SimpleGate()

        self.norm1 = LayerNorm2d(c)

        self.dropout1 = nn.Dropout(drop_out_rate) if drop_out_rate > 0. else nn.Identity()

        self.beta = nn.Parameter(torch.zeros((1, c, 1, 1)), requires_grad=True)

    def forward(self, x):
        # x = inp
        x = self.norm1(x)
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.sg(x)
        x = x * self.sca(x)
        x = self.conv3(x)
        x = self.dropout1(x) * self.beta
        return x

def modulate(x, shift, scale):
    return x * (1 + scale.unsqueeze(-1).unsqueeze(-1)) + shift.unsqueeze(-1).unsqueeze(-1)

#################################################################################
#               Embedding Layers for Timesteps and Class Labels                 #
#################################################################################

class TimestepEmbedder(nn.Module):
    """
    Embeds scalar timesteps into vector representations.
    """
    def __init__(self, hidden_size, frequency_embedding_size=256):
        super().__init__()
        self.mlp = nn.Sequential(
            nn.Linear(frequency_embedding_size, hidden_size,bias=True),
            nn.SiLU(),
            nn.Linear(hidden_size, hidden_size, bias=True),
        )
        self.frequency_embedding_size = frequency_embedding_size

    @staticmethod
    def timestep_embedding(t, dim, max_period=10000):
        """
        Create sinusoidal timestep embeddings.
        :param t: a 1-D Tensor of N indices, one per batch element.
                          These may be fractional.
        :param dim: the dimension of the output.
        :param max_period: controls the minimum frequency of the embeddings.
        :return: an (N, D) Tensor of positional embeddings.
        """
        # https://github.com/openai/glide-text2im/blob/main/glide_text2im/nn.py
        half = dim // 2
        freqs = torch.exp(
            -math.log(max_period) * torch.arange(start=0, end=half, dtype=torch.float32) / half
        ).to(device=t.device)
        args = t[:, None].float() * freqs[None]
        embedding = torch.cat([torch.cos(args), torch.sin(args)], dim=-1)
        if dim % 2:
            embedding = torch.cat([embedding, torch.zeros_like(embedding[:, :1])], dim=-1)
        return embedding

    def forward(self, t):
        t_freq = self.timestep_embedding(t, self.frequency_embedding_size)
        t_emb = self.mlp(t_freq)
        return t_emb


class LabelEmbedder(nn.Module):
    """
    Embeds class labels into vector representations. Also handles label dropout for classifier-free guidance.
    """
    def __init__(self, num_classes, hidden_size, dropout_prob):
        super().__init__()
        use_cfg_embedding = dropout_prob > 0
        self.embedding_table = nn.Embedding(num_classes + use_cfg_embedding, hidden_size)
        self.num_classes = num_classes
        self.dropout_prob = dropout_prob

    def token_drop(self, labels, force_drop_ids=None):
        """
        Drops labels to enable classifier-free guidance.
        """
        if force_drop_ids is None:
            drop_ids = torch.rand(labels.shape[0], device=labels.device) < self.dropout_prob
        else:
            drop_ids = force_drop_ids == 1
        labels = torch.where(drop_ids, self.num_classes, labels)
        return labels

    def forward(self, labels, train, force_drop_ids=None):
        use_dropout = self.dropout_prob > 0
        if (train and use_dropout) or (force_drop_ids is not None):
            labels = self.token_drop(labels, force_drop_ids)
        embeddings = self.embedding_table(labels)
        return embeddings


#################################################################################
#                                 Core IPT Model                                #
#################################################################################

class IPTBlock(nn.Module):
    """
    A IPT block with adaptive layer norm zero (adaLN-Zero) conIPTioning.
    """
    def __init__(self, input_size, hidden_size, num_heads, mlp_ratio=4.0, global_win=8, local_win=8, rep=1, attn_seq=[0,0], ffn_type='rep', window_size=8, dw_expand=2, dw_type='none', **kwargs):
        '''
        Args:
        dw_expand: For NAFNet
        dw_type: NAFNet dwconv type
        posemb_type: pos emb type of IPT related
        '''
        super().__init__()
        assert len(attn_seq) == 2
        # global attention
        window_size = (window_size, window_size) if isinstance(window_size, int) else window_size
        self.global_norm1 = LayerNorm2d(hidden_size, affine=False, eps=1e-6)
        if attn_seq[0] == 0:
            self.global_attn = IPT_Global_Attention(hidden_size, input_size, patch_size=global_win, num_heads=num_heads, bias=True, **kwargs)
        elif attn_seq[0] == 1:
            self.global_attn = IPTV2_Focal_Attention(hidden_size, local_win, num_heads=num_heads, bias=True)
        elif attn_seq[0] == 2:
            self.global_attn = Attention2d(hidden_size, num_heads, qkv_bias=True)
        elif attn_seq[0] == 3:
            self.global_attn = WindowAttention2d(hidden_size, window_size=window_size, num_heads=num_heads, qkv_bias=True, shift_size=0)
        elif attn_seq[0] == 4:
            self.global_attn = ChAttention2d(hidden_size, num_heads, bias=True)
        elif attn_seq[0] == 5:
            self.global_attn = IPT_Local_Attention(hidden_size, input_size, patch_size=local_win, num_heads=num_heads, bias=True, **kwargs)
        elif attn_seq[0] == 6:
            self.global_attn = NAFBlock(hidden_size, dw_expand, dw_type)
        elif attn_seq[0] == 7:
            self.global_attn = IPT_Double_Attention(hidden_size, input_size, local_win=local_win, global_win=global_win, num_heads=num_heads, bias=True, posemb_type=None)

        self.global_norm2 = LayerNorm2d(hidden_size, affine=False, eps=1e-6)
        if ffn_type == 'rep':
            self.global_mlp = FeedForward(hidden_size, mlp_ratio, rep=rep)
        elif ffn_type.startswith('dwconv'):
            approx_gelu = lambda: nn.GELU(approximate="tanh")
            mlp_hidden_dim = int(hidden_size * mlp_ratio)
            self.global_mlp = ConvFFN(hidden_size, mlp_hidden_dim, act_layer=approx_gelu, ffn_type=ffn_type)
        elif ffn_type == 'basic':
            approx_gelu = lambda: nn.GELU(approximate="tanh")
            mlp_hidden_dim = int(hidden_size * mlp_ratio)
            self.global_mlp = Mlp(in_features=hidden_size, hidden_features=mlp_hidden_dim, act_layer=approx_gelu, drop=0)
        else:
            raise NotImplementedError(f'FFN type not implemented: {ffn_type}!')
        self.global_adaLN_modulation = nn.Sequential(
            nn.SiLU(),
            nn.Linear(hidden_size, 6 * hidden_size, bias=True)
        )

        # local attention
        self.local_norm1 = LayerNorm2d(hidden_size, affine=False, eps=1e-6)
        if attn_seq[1]== 0:
            self.local_attn = IPT_Global_Attention(hidden_size, input_size, patch_size=global_win, num_heads=num_heads, bias=True, **kwargs)
        elif attn_seq[1] == 1:
            self.local_attn = IPTV2_Focal_Attention(hidden_size, local_win, num_heads=num_heads, bias=True)
        elif attn_seq[1] == 2:
            self.local_attn = Attention2d(hidden_size, num_heads, qkv_bias=True)
        elif attn_seq[1] == 3:
            self.local_attn = WindowAttention2d(hidden_size, window_size=window_size, num_heads=num_heads, qkv_bias=True, shift_size=1)
        elif attn_seq[1] == 4:
            self.local_attn = ChAttention2d(hidden_size, num_heads, bias=True)
        elif attn_seq[1] == 5:
            self.local_attn = IPT_Local_Attention(hidden_size, input_size, patch_size=local_win, num_heads=num_heads, bias=True, **kwargs)
        elif attn_seq[1] == 51: # shifted local
            self.local_attn = IPT_Local_Attention(hidden_size, input_size, patch_size=local_win, num_heads=num_heads, bias=True, posemb_type=None, shift_size=1)
        elif attn_seq[1] == 6:
            self.local_attn = NAFBlock(hidden_size, dw_expand, dw_type)
        elif attn_seq[1] == 7:
            self.local_attn = IPT_Double_Attention(hidden_size, input_size, local_win=local_win, global_win=global_win, num_heads=num_heads, bias=True, posemb_type=None)

        self.local_norm2 = LayerNorm2d(hidden_size, affine=False, eps=1e-6)
        if ffn_type == 'rep':
            self.local_mlp = FeedForward(hidden_size, mlp_ratio, rep=rep)
        elif ffn_type.startswith('dwconv'):
            approx_gelu = lambda: nn.GELU(approximate="tanh")
            mlp_hidden_dim = int(hidden_size * mlp_ratio)
            self.local_mlp = ConvFFN(hidden_size, mlp_hidden_dim, act_layer=approx_gelu, ffn_type=ffn_type)
        elif ffn_type == 'basic':
            approx_gelu = lambda: nn.GELU(approximate="tanh")
            mlp_hidden_dim = int(hidden_size * mlp_ratio)
            self.local_mlp = Mlp(in_features=hidden_size, hidden_features=mlp_hidden_dim, act_layer=approx_gelu, drop=0)
        else:
            raise NotImplementedError(f'FFN type not implemented: {ffn_type}!')
        self.local_adaLN_modulation = nn.Sequential(
            nn.SiLU(),
            nn.Linear(hidden_size, 6 * hidden_size, bias=True)
        )

    def forward(self, x, c):
        # global attention
        shift_msa, scale_msa, gate_msa, shift_mlp, scale_mlp, gate_mlp = self.global_adaLN_modulation(c).chunk(6, dim=1)
        x = x + gate_msa.unsqueeze(-1).unsqueeze(-1) * self.global_attn(modulate(self.global_norm1(x), shift_msa, scale_msa))
        x = x + gate_mlp.unsqueeze(-1).unsqueeze(-1) * self.global_mlp(modulate(self.global_norm2(x), shift_mlp, scale_mlp))
        # local attention
        shift_msa, scale_msa, gate_msa, shift_mlp, scale_mlp, gate_mlp = self.local_adaLN_modulation(c).chunk(6, dim=1)
        x = x + gate_msa.unsqueeze(-1).unsqueeze(-1) * self.local_attn(modulate(self.local_norm1(x), shift_msa, scale_msa))
        x = x + gate_mlp.unsqueeze(-1).unsqueeze(-1) * self.local_mlp(modulate(self.local_norm2(x), shift_mlp, scale_mlp))
        return x

class FinalLayer(nn.Module):
    """
    The final layer of IPT.
    """
    def __init__(self, hidden_size, out_channels):
        super().__init__()
        self.norm_final = LayerNorm2d(hidden_size, affine=False, eps=1e-6)
        self.out_proj = nn.Conv2d(hidden_size, out_channels, kernel_size=3, stride=1, padding=1, bias=True)
        self.adaLN_modulation = nn.Sequential(
            nn.SiLU(),
            nn.Linear(hidden_size, 2 * hidden_size, bias=True)
        )

    def forward(self, x, c):
        shift, scale = self.adaLN_modulation(c).chunk(2, dim=1)
        x = modulate(self.norm_final(x), shift, scale)
        x = self.out_proj(x)
        return x

class OverlapPatchEmbed(nn.Module):
    def __init__(self, in_c=3, embed_dim=48, bias=False):
        super(OverlapPatchEmbed, self).__init__()

        self.proj = nn.Conv2d(in_c, embed_dim, kernel_size=3, stride=1, padding=1, bias=bias)

    def forward(self, x):
        x = self.proj(x)

        return x

class Downsample(nn.Module):
    def __init__(self, n_feat):
        super(Downsample, self).__init__()

        self.body = nn.Sequential(nn.Conv2d(n_feat, n_feat // 2, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.PixelUnshuffle(2))

    def forward(self, x):
        return self.body(x)

class Upsample(nn.Module):
    def __init__(self, n_feat):
        super(Upsample, self).__init__()

        self.body = nn.Sequential(nn.Conv2d(n_feat, n_feat * 2, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.PixelShuffle(2))

    def forward(self, x):
        return self.body(x)

class IPT_UNet(nn.Module):
    """
    Diffusion UNet model with a Transformer backbone.
    """
    def __init__(
        self,
        input_size=32,
        global_win=2,
        local_win=8,
        in_channels=4,
        hidden_size=1152,
        depth=[6,6,8],
        num_heads=16,
        mlp_ratio=4.0,
        class_dropout_prob=0.1,
        num_classes=1000,
        learn_sigma=True,
        rep=1,
        ffn_type='rep',
        **kwargs
    ):
        super().__init__()
        self.learn_sigma = learn_sigma
        self.in_channels = in_channels
        self.out_channels = in_channels * 2 if learn_sigma else in_channels
        self.num_heads = num_heads

        global_win = global_win if isinstance(global_win, list) else [global_win] * 5
        local_win = local_win if isinstance(local_win, list) else [local_win] * 5

        self.x_embedder = OverlapPatchEmbed(in_channels, hidden_size, bias=True)
        self.t_embedder_1 = TimestepEmbedder(hidden_size)
        self.y_embedder_1 = LabelEmbedder(num_classes, hidden_size, class_dropout_prob)

        self.t_embedder_2 = TimestepEmbedder(hidden_size*2)
        self.y_embedder_2 = LabelEmbedder(num_classes, hidden_size*2, class_dropout_prob)

        self.t_embedder_3 = TimestepEmbedder(hidden_size*4)
        self.y_embedder_3 = LabelEmbedder(num_classes, hidden_size*4, class_dropout_prob)

        # encoder-1
        self.encoder_level_1 = nn.ModuleList([
            IPTBlock(input_size, hidden_size, num_heads, mlp_ratio=mlp_ratio, global_win=global_win[0], local_win=local_win[0], rep=rep, ffn_type=ffn_type, **kwargs) for _ in range(depth[0])
        ])
        self.down1_2 = Downsample(hidden_size) 

        # encoder-2
        self.encoder_level_2 = nn.ModuleList([
            IPTBlock(input_size//2, hidden_size*2, num_heads, mlp_ratio=mlp_ratio, global_win=global_win[1], local_win=local_win[1], rep=rep, ffn_type=ffn_type, **kwargs) for _ in range(depth[1])
        ])
        self.down2_3 = Downsample(hidden_size*2) 

        # latent
        self.latent = nn.ModuleList([
            IPTBlock(input_size//4, hidden_size*4, num_heads, mlp_ratio=mlp_ratio, global_win=global_win[2], local_win=local_win[2], rep=rep, ffn_type=ffn_type, **kwargs) for _ in range(depth[2])
        ])

        # decoder-2
        self.up3_2 = Upsample(int(hidden_size*4))  ## From Level 4 to Level 3
        self.reduce_chan_level2 = nn.Conv2d(int(hidden_size*4), int(hidden_size*2), kernel_size=1, bias=True)
        self.decoder_level_2 = nn.ModuleList([
            IPTBlock(input_size//2, hidden_size*2, num_heads, mlp_ratio=mlp_ratio, global_win=global_win[3], local_win=local_win[3], rep=rep, ffn_type=ffn_type, **kwargs) for _ in range(depth[3])
        ])

        # decoder-1
        self.up2_1 = Upsample(int(hidden_size*2))  ## From Level 4 to Level 3
        self.reduce_chan_level1 = nn.Conv2d(int(hidden_size*2), int(hidden_size*2), kernel_size=1, bias=True)
        self.decoder_level_1 = nn.ModuleList([
            IPTBlock(input_size, hidden_size*2, num_heads, mlp_ratio=mlp_ratio, global_win=global_win[4], local_win=local_win[4], rep=rep, ffn_type=ffn_type, **kwargs) for _ in range(depth[4])
        ])

        self.output = nn.Conv2d(int(hidden_size*2), int(hidden_size*2), kernel_size=3, stride=1, padding=1, bias=True)

        self.final_layer = FinalLayer(hidden_size*2, self.out_channels)
        self.initialize_weights()

    def initialize_weights(self):
        # Initialize transformer layers:
        def _basic_init(module):
            if isinstance(module, nn.Linear) or isinstance(module, nn.Conv2d):
                torch.nn.init.xavier_uniform_(module.weight)
                if module.bias is not None:
                    nn.init.constant_(module.bias, 0)
        self.apply(_basic_init)

        # Initialize patch_embed like nn.Linear (instead of nn.Conv2d):
        w = self.x_embedder.proj.weight.data
        nn.init.xavier_uniform_(w.view([w.shape[0], -1]))
        nn.init.constant_(self.x_embedder.proj.bias, 0)

        # Initialize label embedding table:
        nn.init.normal_(self.y_embedder_1.embedding_table.weight, std=0.02)
        nn.init.normal_(self.y_embedder_2.embedding_table.weight, std=0.02)
        nn.init.normal_(self.y_embedder_3.embedding_table.weight, std=0.02)

        # Initialize timestep embedding MLP:
        nn.init.normal_(self.t_embedder_1.mlp[0].weight, std=0.02)
        nn.init.normal_(self.t_embedder_1.mlp[2].weight, std=0.02)

        nn.init.normal_(self.t_embedder_2.mlp[0].weight, std=0.02)
        nn.init.normal_(self.t_embedder_2.mlp[2].weight, std=0.02)

        nn.init.normal_(self.t_embedder_3.mlp[0].weight, std=0.02)
        nn.init.normal_(self.t_embedder_3.mlp[2].weight, std=0.02)

        # Zero-out adaLN modulation layers in IPT blocks:
        blocks = self.encoder_level_1 + self.encoder_level_2 + self.latent + self.decoder_level_2 + self.decoder_level_1
        for block in blocks:
            nn.init.constant_(block.global_adaLN_modulation[-1].weight, 0)
            nn.init.constant_(block.global_adaLN_modulation[-1].bias, 0)
            nn.init.constant_(block.local_adaLN_modulation[-1].weight, 0)
            nn.init.constant_(block.local_adaLN_modulation[-1].bias, 0)

        # Zero-out output layers:
        nn.init.constant_(self.final_layer.adaLN_modulation[-1].weight, 0)
        nn.init.constant_(self.final_layer.adaLN_modulation[-1].bias, 0)
        nn.init.constant_(self.final_layer.out_proj.weight, 0)
        nn.init.constant_(self.final_layer.out_proj.bias, 0)

    def forward(self, x, t, y, speedtest=False):
        if speedtest:
            times = [time.time()] # 0
        """
        Forward pass of IPT.
        x: (N, C, H, W) tensor of spatial inputs (images or latent representations of images)
        t: (N,) tensor of diffusion timesteps
        y: (N,) tensor of class labels
        """
        # x = self.x_embedder(x) + self.pos_embed  # (N, T, D), where T = H * W / patch_size ** 2
        x = self.x_embedder(x)                   # (N, C, H, W)
        t1 = self.t_embedder_1(t)    # (N, C, 1, 1)
        y1 = self.y_embedder_1(y, self.training)    # (N, C, 1, 1)
        c1 = t1 + y1                                # (N, D, 1, 1)

        t2 = self.t_embedder_2(t)    # (N, C, 1, 1)
        y2 = self.y_embedder_2(y, self.training)    # (N, C, 1, 1)
        c2 = t2 + y2                                # (N, D, 1, 1)

        t3 = self.t_embedder_3(t)    # (N, C, 1, 1)
        y3 = self.y_embedder_3(y, self.training)    # (N, C, 1, 1)
        c3 = t3 + y3                                # (N, D, 1, 1)
        if speedtest:
            times.append(time.time()) # 1
        # encoder_1
        out_enc_level1 = x
        for block in self.encoder_level_1:
            out_enc_level1 = block(out_enc_level1, c1)
        inp_enc_level2 = self.down1_2(out_enc_level1)
        if speedtest:
            times.append(time.time()) # 2
        # encoder_2
        out_enc_level2 = inp_enc_level2
        for block in self.encoder_level_2:
            out_enc_level2 = block(out_enc_level2, c2)
        inp_enc_level3 = self.down2_3(out_enc_level2)
        if speedtest:
            times.append(time.time()) # 3
        # latent
        latent = inp_enc_level3
        for block in self.latent:
            latent = block(latent, c3)
        if speedtest:
            times.append(time.time()) # 4
        # decoder_2
        inp_dec_level2 = self.up3_2(latent)
        inp_dec_level2 = torch.cat([inp_dec_level2, out_enc_level2], 1)
        inp_dec_level2 = self.reduce_chan_level2(inp_dec_level2)
        out_dec_level2 = inp_dec_level2
        for block in self.decoder_level_2:
            out_dec_level2 = block(out_dec_level2, c2)
        if speedtest:
            times.append(time.time()) # 5
        # decoder_1
        inp_dec_level1 = self.up2_1(out_dec_level2)
        inp_dec_level1 = torch.cat([inp_dec_level1, out_enc_level1], 1)
        inp_dec_level1 = self.reduce_chan_level1(inp_dec_level1)
        out_dec_level1 = inp_dec_level1
        for block in self.decoder_level_1:
            out_dec_level1 = block(out_dec_level1, c2)
        if speedtest:
            times.append(time.time()) # 6
        # output
        x = self.output(out_dec_level1)

        x = self.final_layer(x, c2)                # (N, T, patch_size ** 2 * out_channels)
        if speedtest:
            times.append(time.time()) # 7
        return x if not speedtest else (x, times)

    def forward_with_cfg(self, x, t, y, cfg_scale):
        """
        Forward pass of IPT, but also batches the unconIPTional forward pass for classifier-free guidance.
        """
        # https://github.com/openai/glide-text2im/blob/main/notebooks/text2im.ipynb
        half = x[: len(x) // 2]
        combined = torch.cat([half, half], dim=0)
        model_out = self.forward(combined, t, y)
        # For exact reproducibility reasons, we apply classifier-free guidance on only
        # three channels by default. The standard approach to cfg applies it to all channels.
        # This can be done by uncommenting the following line and commenting-out the line following that.
        # eps, rest = model_out[:, :self.in_channels], model_out[:, self.in_channels:]
        eps, rest = model_out[:, :3], model_out[:, 3:]
        cond_eps, uncond_eps = torch.split(eps, len(eps) // 2, dim=0)
        half_eps = uncond_eps + cfg_scale * (cond_eps - uncond_eps)
        eps = torch.cat([half_eps, half_eps], dim=0)
        return torch.cat([eps, rest], dim=1)

#################################################################################
#                                   U-DITs Configs                                  #
#################################################################################
def IPTcustom(**kwargs):
    return IPT_UNet(**kwargs)

def IPT1K(**kwargs):
    return IPT_UNet(global_win=2, local_win=2, hidden_size=48, num_heads=2, depth=[2,3,4,3,2], ffn_type='rep', rep=1, mlp_ratio=2, attn_seq=[0,0], attn_type='v2', posemb_type='rope2d', before_attn='dwconv5', aug_shortcut=1)

def IPT6K(**kwargs):
    return IPT_UNet(global_win=2, local_win=2, hidden_size=96, num_heads=4, depth=[2,5,8,5,2], ffn_type='rep', rep=1, mlp_ratio=2, attn_seq=[0,0], attn_type='v2', posemb_type='rope2d', before_attn='dwconv5', aug_shortcut=1)

def IPT20K(**kwargs):
    return IPT_UNet(global_win=2, local_win=2, hidden_size=192, num_heads=8, depth=[2,5,8,5,2], ffn_type='rep', rep=1, mlp_ratio=2, attn_seq=[0,0], attn_type='v2', posemb_type='rope2d', before_attn='dwconv5', aug_shortcut=1)

def IPT80K(**kwargs):
    return IPT_UNet(global_win=2, local_win=2, hidden_size=384, num_heads=16, depth=[2,5,8,5,2], ffn_type='rep', rep=1, mlp_ratio=2, attn_seq=[0,0], attn_type='v2', posemb_type='rope2d', before_attn='dwconv5', aug_shortcut=1)

DiT_models = {
    'IPTcustom': IPTcustom,
    'IPT1K': IPT1K,
    'IPT6K': IPT6K,
    'IPT20K': IPT20K,
    'IPT80K': IPT80K,
}


if __name__=="__main__":
    from torchprofile import profile_macs
    import warnings
    import time

    # Ablations on downsampler
    model = IPTcustom(global_win=2, local_win=[2,2,2,2,2], depth=[2,3,4,3,2], hidden_size=48, num_heads=2, mlp_ratio=2, rep=0, attn_seq=[0,0],  attn_type='v2', posemb_type='rope2d', before_attn='conv3', aug_shortcut=1) # 全精度,1000M

    test_throughput = 0
    model.cuda()

    inputs = torch.rand(1, 4, 32, 32).cuda()
    t = torch.ones(1).int().cuda()
    y = torch.ones(1).int().cuda()
    
    model(inputs, t, y)
    out = model(inputs, t, y, speedtest=False)

    if test_throughput:
        from utils.test_latency_throughout import test_model_throughout
        test_model_throughout(model, model_name='', bs=800)

    flops = profile_macs(model, (inputs, t, y))

    with torch.no_grad():
        for _ in range(10): # pre-warm
            out = model(inputs, t, y)
        start_time = time.time()
        for _ in range(20):
            out = model(inputs, t, y)
        end_time = time.time()
    print(f'FLOPS&TIME: {flops/1e6:.2f}',',',f'{end_time-start_time:.2f}')

    print(f"output : {out.size()}")

    out = model(inputs, t, y)

    gt = torch.rand(1, 8, 32, 32).cuda()

    loss = torch.mean(out-gt)
    loss.backward()
